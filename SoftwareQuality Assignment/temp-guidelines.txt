console-based interface for managing membership
3 types of users:

* Super Administrator (hardcoded authentication: username = superadmin, password = Admin321!) - full control of system
* System Administators (defined by super administrator only) - admin who can manage advisors (register, modify or delete etc)
* Advisors (defined by super or system adminstrators) - can manage membership in system (register, modify, search for & retrieve info about members)
------------------

client requests membership, their info should be registered in the system first, to then be approved by advisor or higher
following must be entered by client:

* first & last name
* Address (street name, house number, zip code (DDDDXX)) & City (system generates a list of 10 predifined cities by me)
* Emailaddress
* Mobile phone (+31-6-DDDDDDDD) with the D's having to be entered by client

system automatically adds registration date & membership ID (str of 10 random digits, not allowed to start w a 0)
membership ID's last digit is a checksum (must be == to sum of first 9 digits % 10)
------------------

UI must have menu's/options for users to choose from
UI is not graded, but must be usable by teacher!!
------------------

Database must be SQLite
is used to store & manage members' & users' info

sensitive data (usernames, passwords, phone numbers & e-mailaddresses) must be encrypted in the database
------------------

Usage:
Clients (a.k.a. members) have 0 role in the application, they only have their info stored
Advisors & System Administators have profiles (containing first name, last name & registration date)

Advisors are employees and can do the following:

* update their own password
* add new members to the system
* modify/update member's info in the system
* search & retrieve member's info

System Administrators can do the following:

* update their own password
* check list of users & their roles
* define & add new advisors to system
* modify/update existing advisor's account and profile
* delete existing advisor's account
* reset an existing advisor's password
* make a backup of the system & restore it
* view the log file of the system
* add new members to the system
* modify/update member's info in the system
* delete member from the system
* search & retrieve member's info

Super Administators can do the following:

Everything a System Administator can do (minus update their own password) in addition to:

* define & add new system administrator
* modify/update existing system administrator's account and profile
* delete existing system administrator's account
* reset existing system administrator's password
------------------

Search function must accept any data field as a search key (member ID, first/last name, Address, Emailaddress & phone number)
must also accept partial keys on all data fields (subset of full entry, like 'ia' for 'William')
------------------

System must log all activities
All suspicious activities are flagged as "suspicious" (boolean) like if some admin action happens without login
log file must be encrypted and only readable through system interface (so only advisors or higher)
should at minimum log:

* number (just increment each time something is logged)
* performed by who (username)
* date
* time
* description
* additional info
* bool of suspicious or not
------------------

Encryption can be done w a simple algorithm (Caesar cipher, Vigen√®re cipher etc) but NO 3rd party libraries or modules, must implement it myself
------------------

Backups must include log files and the database itself inside a zip folder (sensitive data should still be encrypted, regardless of backup or restore)
------------------

Usernames & Passwords must follow specific rules:

Usernames:

* must be unique & be 6 characters or more (maximum is 10)
* must start w a letter
* can contain a-z 0-9 _ ' and .
* no distinguishing between lower and upper case

Passwords:

* must be at least 8 characters long (maximum is 30)
* can contain a-z A-Z 0-9 and ~!@#$%&_-+=`|\(){}[]:;'<>,.?/
* must have a combination of at least 1 lowercase, 1 uppercase, 1 number and 1 special character
------------------

User manual must be included
explains how to use the system (for all types of users)
included must be any commands, shortcuts, usernames/passwords (for test-users for example)
is able to contain screenshots, examples or diagrams
is used by teacher to run, test & grade the system